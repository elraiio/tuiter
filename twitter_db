DROP DATABASE IF EXISTS twitter_db;

CREATE DATABASE twitter_db;


DROP TABLE IF EXISTS users;

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    user_handle VARCHAR(50) NOT NULL UNIQUE,
    email_address VARCHAR(50) NOT NULL UNIQUE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phonenumber VARCHAR(15) UNIQUE,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    follower_count INT DEFAULT 0  -- A√±adido aqu√≠
);

INSERT INTO users(user_handle, email_address, first_name, last_name, phonenumber)
VALUES ('elraiio', 'elraiio@gmail.com', 'Diego', 'Pavon', '3854321456');

SELECT * FROM users;

INSERT INTO users (user_handle, email_address, first_name, last_name, phonenumber)
VALUES
    ('john_doe', 'john.doe@example.com', 'John', 'Doe', '1234567890'),
    ('jane_smith', 'jane.smith@example.com', 'Jane', 'Smith', '2345678901'),
    ('alex_jones', 'alex.jones@example.com', 'Alex', 'Jones', '3456789012'),
    ('emily_davis', 'emily.davis@example.com', 'Emily', 'Davis', '4567890123'),
    ('michael_brown', 'michael.brown@example.com', 'Michael', 'Brown', '5678901234'),
    ('sarah_wilson', 'sarah.wilson@example.com', 'Sarah', 'Wilson', '6789012345'),
    ('chris_clark', 'chris.clark@example.com', 'Chris', 'Clark', '7890123456'),
    ('anna_lee', 'anna.lee@example.com', 'Anna', 'Lee', '8901234567'),
    ('david_walker', 'david.walker@example.com', 'David', 'Walker', '9012345678'),
    ('laura_hill', 'laura.hill@example.com', 'Laura', 'Hill', '0123456789');

DROP TABLE IF EXISTS followers;

CREATE TABLE followers (
    follower_id INT NOT NULL,
    following_id INT NOT NULL,
    FOREIGN KEY (follower_id) REFERENCES users (user_id),
    FOREIGN KEY (following_id) REFERENCES users (user_id),
    PRIMARY KEY (follower_id, following_id)
);

SELECT * FROM followers;

ALTER TABLE followers
ADD CONSTRAINT check_follower_id
CHECK (follower_id != following_id);

INSERT INTO followers (follower_id, following_id)
VALUES
    (1, 2),  -- El usuario 1 sigue al usuario 2
    (1, 3),  -- El usuario 1 sigue al usuario 3
    (2, 3),  -- El usuario 2 sigue al usuario 3
    (2, 4),  -- El usuario 2 sigue al usuario 4
    (3, 1),  -- El usuario 3 sigue al usuario 1
    (3, 5),  -- El usuario 3 sigue al usuario 5
    (4, 5),  -- El usuario 4 sigue al usuario 5
    (5, 6),  -- El usuario 5 sigue al usuario 6
    (6, 7),  -- El usuario 6 sigue al usuario 7
    (7, 8),  -- El usuario 7 sigue al usuario 8
    (8, 9),  -- El usuario 8 sigue al usuario 9
    (9, 10), -- El usuario 9 sigue al usuario 10
    (10, 11),-- El usuario 10 sigue al usuario 11
    (11, 1); -- El usuario 11 sigue al usuario 1

-- Consultas
SELECT follower_id, following_id FROM followers;
SELECT follower_id FROM followers WHERE following_id = 1;
SELECT COUNT (follower_id) AS followers FROM followers WHERE following_id = 1;

-- Top 3 usuarios con mayor numero de seguidores
SELECT following_id, COUNT(follower_id) AS followers
FROM followers
GROUP BY following_id
ORDER BY followers DESC
LIMIT 3;


-- Top 3 usuarios con el mayor n√∫mero de seguidores junto con su ID, nombre de usuario, y nombre.
SELECT users.user_id, users.user_handle, users.first_name, followers.following_id, COUNT(followers.follower_id) AS followers
FROM followers
JOIN users ON users.user_id = followers.following_id
GROUP BY users.user_id, users.user_handle, users.first_name, followers.following_id
ORDER BY followers DESC
LIMIT 3;


DROP TABLE IF EXISTS tweets;

CREATE TABLE tweets (
tweet_id SERIAL PRIMARY KEY,
user_id INT NOT NULL,
tweet_text VARCHAR(280) NOT NULL,
num_likes INT DEFAULT 0,
num_retweets INT DEFAULT 0,
num_coments INT DEFAULT 0,
created_at TIMESTAMP NOT NULL DEFAULT NOW(),
FOREIGN KEY (user_id) REFERENCES users(user_id)
);



INSERT INTO tweets (user_id, tweet_text)
VALUES
(1, 'Holaa, soy el raiio‚ö° que tal pibardos?'),
(2, 'Entrando a twitter, que genial üëâüëà'),
(3, 'Buenas buenas, saludando por aqui'),
(4, 'Listo para compartir mis pensamientos üí≠'),
(5, '¬øAlguien m√°s sinti√≥ ese temblor? üò≥'),
(1, '¬øAlguien mas tiene calor ahor?'),
(6, 'Lluvia de ideas para mi pr√≥ximo proyecto üåßÔ∏è'),
(7, 'Nada como un buen caf√© por la ma√±ana ‚òï'),
(1, 'Si, tu chancho esta gordo, hacelo adelgazar'),
(8, 'Entrenando para la pr√≥xima marat√≥n üèÉ‚Äç‚ôÇÔ∏è'),
(9, 'Este clima est√° perfecto para una siesta üò¥'),
(1, 'no le des azucar ni salsa ni pan...'),
(10, 'Cocinando algo delicioso hoy üç≥'),
(11, 'D√≠a perfecto para una caminata al aire libre üö∂‚Äç‚ôÄÔ∏è');


-- ¬øCuantos tweets h hecho un usuario?
SELECT user_id, COUNT (*) AS tweet_count
FROM tweets
GROUP BY user_id;

-- Sub consulta
-- Obtener los tweets de los usuarios que tienen mas de 2 seguidores
SELECT tweet_id, tweet_text, user_id
FROM tweets
WHERE user_id IN (
SELECT following_id
FROM followers
GROUP BY following_id
HAVING COUNT(*) >1
);

-- DELETE
-- DELETE FROM tweets WHERE tweet_id = 1;
-- DELETE FROM tweets WHERE user_id = 1;

-- DELETE FROM tweets WHERE tweet_text LIKE '%Hola%';

-- UPDATE 
-- UPDATE tweets 
-- SET num_coments = num_coments + 1 
-- WHERE tweet_id = 2;

-- Reemplazar texto
-- UPDATE tweets SET tweet_text = REPLACE (tweet_text, 'Alguien', 'Algun humano')
-- WHERE tweet_text LIKE '%Alguien%'


DROP TABLE IF EXISTS tweet_likes;

CREATE TABLE tweet_likes(
user_id INT NOT NULL,
tweet_id INT NOT NULL,
FOREIGN KEY (user_id) REFERENCES users(user_id),
FOREIGN KEY (tweet_id) REFERENCES tweets(tweet_id),
PRIMARY KEY (user_id, tweet_id)
);

INSERT INTO tweet_likes (user_id, tweet_id)
VALUES (1, 3), (2, 11), (3, 11), (4, 11), (5, 14), (6, 5), (7, 7);

-- Obtener el numero de likes paraa cada tuit
SELECT tweet_id, COUNT(*) AS like_count
FROM tweet_likes
GROUP BY tweet_id;


-- Funcion para incrementar seguidores
DROP FUNCTION IF EXISTS increase_follower_count_function;

CREATE FUNCTION increase_follower_count_function()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE users 
  SET follower_count = follower_count + 1
  WHERE user_id = NEW.following_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- TRIGGER
CREATE TRIGGER increase_follower_count
AFTER INSERT ON followers
FOR EACH ROW
EXECUTE FUNCTION increase_follower_count_function(); -- Ejecuta la funcion

-- Prueba del trigger
-- Inserta nuevos registros en followers para activar el trigger
INSERT INTO followers (follower_id, following_id)
VALUES
    (2, 1),  -- El usuario 2 sigue al usuario 1
    (4, 2),  -- El usuario 4 sigue al usuario 2
    (5, 3),  -- El usuario 5 sigue al usuario 3
    (6, 4),  -- El usuario 6 sigue al usuario 4
    (7, 5);  -- El usuario 7 sigue al usuario 5

-- Verificar la actualizaci√≥n del contador de seguidores
SELECT user_id, user_handle, follower_count
FROM users
ORDER BY user_id;

